<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="800" viewBox="0 0 1200 800">
  <defs>
    <filter id="blur-filter" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="5" />
    </filter>
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" stop-opacity="0.9" />
      <stop offset="100%" stop-color="#1e293b" stop-opacity="0.9" />
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="100%" height="100%" fill="url(#bg-gradient)" />
  
  <!-- Code snippets in the background - Opacity reduced -->
  <g font-family="monospace" font-size="12" fill="#94a3b8" opacity="0.15">
    <!-- Python code -->
    <text x="50" y="50">def analyze_data(data):</text>
    <text x="70" y="70">    results = {}</text>
    <text x="70" y="90">    for key, value in data.items():</text>
    <text x="90" y="110">        if isinstance(value, dict):</text>
    <text x="110" y="130">            results[key] = analyze_data(value)</text>
    <text x="90" y="150">        elif isinstance(value, list):</text>
    <text x="110" y="170">            results[key] = [analyze_data(item) for item in value]</text>
    <text x="90" y="190">        else:</text>
    <text x="110" y="210">            results[key] = transform(value)</text>
    <text x="70" y="230">    return results</text>
    
    <!-- C# code -->
    <text x="600" y="100">public class DataProcessor</text>
    <text x="600" y="120">{</text>
    <text x="620" y="140">    private readonly ILogger _logger;</text>
    <text x="620" y="160">    public DataProcessor(ILogger logger)</text>
    <text x="620" y="180">    {</text>
    <text x="640" y="200">        _logger = logger;</text>
    <text x="620" y="220">    }</text>
    <text x="620" y="240">    public async Task&lt;Result&gt; ProcessAsync(Data data)</text>
    <text x="620" y="260">    {</text>
    <text x="640" y="280">        try {</text>
    <text x="660" y="300">            var result = await _apiClient.SendAsync(data);</text>
    <text x="660" y="320">            return new Result { Success = true, Data = result };</text>
    <text x="640" y="340">        } catch (Exception ex) {</text>
    <text x="660" y="360">            _logger.LogError(ex, "Error processing data");</text>
    <text x="660" y="380">            return new Result { Success = false };</text>
    <text x="640" y="400">        }</text>
    <text x="620" y="420">    }</text>
    <text x="600" y="440">}</text>
    
    <!-- JavaScript code -->
    <text x="100" y="500">const createOptimizedQueries = (schema) => {</text>
    <text x="120" y="520">  const cache = new Map();</text>
    <text x="120" y="540">  return {</text>
    <text x="140" y="560">    getById: async (id) => {</text>
    <text x="160" y="580">      if (cache.has(id)) return cache.get(id);</text>
    <text x="160" y="600">      const result = await db.findOne({ id });</text>
    <text x="160" y="620">      cache.set(id, result);</text>
    <text x="160" y="640">      return result;</text>
    <text x="140" y="660">    },</text>
    <text x="140" y="680">    update: async (id, data) => {</text>
    <text x="160" y="700">      const result = await db.update(id, data);</text>
    <text x="160" y="720">      cache.delete(id);</text>
    <text x="160" y="740">      return result;</text>
    <text x="140" y="760">    }</text>
    <text x="120" y="780">  };</text>
    <text x="100" y="800">};</text>
  </g>
  
  <!-- Egyptian symbols scattered around - More subtle -->
  <g fill="#f59e0b" opacity="0.2">
    <!-- Ankh Symbol -->
    <path d="M300,250 C300,235 310,225 325,225 C340,225 350,235 350,250 C350,265 340,275 325,275 C310,275 300,265 300,250 M325,275 L325,310" stroke="#f59e0b" stroke-width="5" fill="none" />

    <!-- Eye of Horus -->
    <path d="M700,200 C710,190 730,195 740,200 C760,210 770,220 780,240 C760,235 750,230 740,230 C725,230 715,235 700,230 C685,225 680,205 700,200 Z" stroke="#f59e0b" stroke-width="2" />
    <circle cx="720" cy="215" r="5" />

    <!-- Scarab -->
    <path d="M900,500 C920,485 950,485 970,500 C980,510 980,530 970,540 C950,555 920,555 900,540 C890,530 890,510 900,500 Z" stroke="#f59e0b" stroke-width="2" />
    <path d="M935,500 L935,485" stroke="#f59e0b" stroke-width="2" />
    <path d="M925,498 L925,488" stroke="#f59e0b" stroke-width="2" />
    <path d="M945,498 L945,488" stroke="#f59e0b" stroke-width="2" />

    <!-- Pyramid -->
    <path d="M400,600 L440,540 L480,600 Z" stroke="#f59e0b" stroke-width="2" fill="none" />
  </g>
  
  <!-- Signature "Mina Narmer" - Semi-transparent -->
  <text x="950" y="750" font-family="'Times New Roman', serif" font-size="24" fill="#f59e0b" opacity="0.5">MINA NARMER</text>
  
  <!-- Hieroglyphic signature - Semi-transparent -->
  <text x="950" y="780" font-family="serif" font-size="20" fill="#f59e0b" opacity="0.4">&#x13000;&#x13171;&#x131CB;&#x1309E;</text>
</svg>